def egcd(a, b):
    p1, p2 = 0, 1
    while b != 0:
        q, a, b = a // b, b, a % b
        p1, p2 = p2, p1 - q * p2
    return  a, p1

def modInverse(fi_n, e):
    gcd, inv = egcd(fi_n, e)
    if gcd == 1:
        return inv % fi_n

data = [
    # p, q, y
    [
        13169004533,
        101279,
        130027,
        6029832903
    ],
    [
        1690428486610429,
        35352181,
        47816809,
        22496913456008
    ],
    [
        56341958081545199783,
        6940440583, 
        8117922401,
        17014716723435111315
    ],
    [
        6120215756887394998931731,
        2924446284457, 
        2092777627483, 
        5077587957348826939798388
    ], 
    [
        514261067785300163931552303017,
        605742134588197, 
        848976880459061, 
        357341101854457993054768343508
    ],
    [
        21259593755515403367535773703117421,
        175824717389116441, 
        120913567052497776, 
        18829051270422357250395121195166553
    ],
    [
        1371108864054663830856429909460283182291,
        29857785889724643173, 
        45921317445260458967, 
        35962927026249687666434209737424754460
    ]
]

for r in data:
    d = modInverse((r[1] - 1)*(r[2] - 1), 65537)
    print(pow(r[3], d, r[0]))